#!/usr/bin/ruby
#
# == Synopsis 
#   A ruby backup front-end powered by rsync that can save
#   multiple backup profiles between uses in an sqlite database
#
# == Usage 
#   rubac [options]
#
#   For help use: rubac -h
#
# == Options
#   -g, --global          Apply excludes, options etc., to global profile
#   -p, --profile[=NAME]  Apply options only to named backup profile (default is rubac)
#   -D, --data_dir[=PATH] Database directory 
#
#   -c, --client[=HOST]   Client to backup (default is localhost)
#   -i, --include=PATH    Include path, comma separate multiple paths
#   -x, --exclude=PATH    Exclude path, comma separate multiple paths
#   -d, --dest=DEST       Local destination path (eg., /mnt/backup)
#   -m, --mail=EMAIL      Notification email, comma separated list
#   -o, --opts=OPTS       Extra rsync options
#
#   -T, --TMP=PATH        Temporary directory for logging, etc (default is /var/log/rubac)
#   -l, --log[=NAME]      Name of log file, (default is profile.%run_date%.log)
#   -s, --syslog          Use syslog for logging [??]
#
#   -t, --list            List the includes, excludes, etc., for the named profile
#   -F, --full            Perform full backup (overwrites rubac.0)
#   -I, --incremental[=N] Number of incremental backups (default is 5)
#   -n, --dry-run         Perform a trial run of the backup
#   -R, --run             Run specified profile
#
#   -H, --history         Backup history
#   -h, --help            Displays help message
#   -v, --version         Display the version
#   -q, --quiet           Output as little as possible, overrides verbose
#   -V, --verbose         Verbose output
#
# == Examples
#
#   Setup and use a default backup
#
#   rubac -g -o "--delete-excluded"
#   rubac -g --data_dir=/etc/rubac
#   rubac -i "/home/steeve,/home/lissa,/home/etienne" -x "*/.gvfs/"
#   rubac -x "*/.thumbnails/,*/.thunderbird/*/ImapMail/,*/.beagle/"
#   rubac -m backupadmin@mail.host
#   rubac -l /var/log/rubac
#   ...
#   rubac --run
#
#   List then backup client esme using the esme profile
#   rubac -c esme -p esme --list
#   rubac -c esme -p esme --run
#
#   Should one be able to specify a client using rsync notation,
#
#   rubac -c donkey -i "/home/steeve,/home/lissa,/home/etienne" -x "*/.gvfs/"
#   rubac -i "donkey:/home/steeve,donkey:/home/lissa,donkey:/home/etienne"
#
#   Each include path should probably include a client (unless local) so
#   the host should be part of the includes database table.
#
# == Environment Variables ==
#
#   RUBAC_DATADIR - set the database directory
#   RUBAC_PROFILE - set the backup profile to use
#   RUBAC_CLIENT  - set the client to use
#   RUBAC_SSHOPTS - set the ssh opts (defaults to -av)
#   RSYNC_RSH     - ssh command string, defaults to "ssh" here
#
# == Author
#   Steeve McCauley
#
# == Copyright
#   Copyright (c) 2009 Steeve McCauley. Licensed under the GPL
#
#   This program is free software: you can redistribute it and/or modify
#   it under the terms of the GNU General Public License as published by
#   the Free Software Foundation, either version 3 of the License, or
#   (at your option) any later version.
#
#   This program is distributed in the hope that it will be useful,
#   but WITHOUT ANY WARRANTY; without even the implied warranty of
#   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#   GNU General Public License for more details.
#
#   You should have received a copy of the GNU General Public License
#   along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
# $Id$

require 'optparse' 
require 'rdoc/usage'
require 'ostruct'
require 'date'
require 'socket'

require 'xmlsimple'

require 'rubac_db'
require 'szmsg'

#
# rsync version must be at least 2.5.6 for --link-dest option
#

class Config_rubac
	#
	# configuration template hash
	#
	def initialize
		@def_config = {
			'globals' => {
				'version' => {
					'major' => '0',
					'minor' => '6',
					'revision' => "$Rev$"[6..-3]
				},
				'opts' => '',
				'includes' => '',
				'excludes' => '',
				'dest' => ''
			},
			'clients' => {
				'localhost' => {
					'includes' => '',
					'excludes' => '',
					'opts' => ''
				},
			}
		}
		@config = {}
	end

	# load the xml config
	def load_xml(file, path="./")
		@xml_file = File.join(path, file)
		if File.exist?(@xml_file)
			@config = XmlSimple.xml_in(@xml_file, 'ForceArray' => false)
		else
			puts "Config #{@xml_file} not found, using default"
			@config = @def_config.to_hash
		end
		puts "##### load_xml #{@xml_file}" if @debug
	end

	# save the xml config
	def save_xml
		out = XmlSimple.xml_out(@config, { 'RootName' => 'rubac_config', 'NoAttr' => true, 'AttrPrefix' => true } )
		xml="<?xml version=\"1.0\" encoding=\"ISO-8859-1\"?>\n" + out

		file = File.new(@xml_file, "w")
		file << xml
		file.close

		xml
	end

	def add_client(host, includes, excludes, opts)
		client= {
			"#{host}" => {
				'includes' => includes,
				'excludes' => excludes,
				'opts' => opts
			}
		}
		@config['clients'].merge!(client)
	end

	def get_config
		@config
	end

	def get_global_config
		@config['globals']
	end

	def append_global_key(item, key)
		# key can be a comma separated list, should convert to array
		# and compare all values of the with all values in keys below
		keys = key.split(",")
		keys.each { |k| k.strip! }
		
		items = []
		if @config['globals']["#{item}"].split(",").length > 0
			items=@config['globals']["#{item}"].split(",")
		end
		# merge, removing duplicates
		items = items | keys
		@config['globals']["#{item}"] = items.join(",")
	end

	# add the specified includes to the global include list
	def append_global_includes(inc)
		append_global_key("includes", inc)
	end

	# add the specified excludes to the global exclude list
	def append_global_excludes(exc)
		append_global_key("excludes", exc)
	end

	# add the specified opts to the global opts list
	def append_global_opts(opts)
		append_global_key("opts", opts)
	end

	# set the specified path to the global backup destination
	def set_global_dest(dest)
		@config['globals']['dest'] = dest
	end

	def get_global_dest
		@config['globals']['dest'].to_s
	end

	def get_host_config(host)
		if not @config['clients'].has_key?(host)
			add_client(host, "", "", "")
		end
		@config['clients']["#{host}"]
	end

	# overwrite includes for specified client
	def set_client_includes(host, inc)
		get_host_config(host)
		@config['clients']["#{host}"]['includes'] = inc
	end

	# overwrite excludes for specified client
	def set_client_excludes(host, exc)
		get_host_config(host)
		@config['clients']["#{host}"]['excludes'] = exc 
	end

	# overwrite opts for specified client
	def set_client_opts(host, opts)
		get_host_config(host)
		@config['clients']["#{host}"]['opts'] = opts
	end

	# append (or set) the specified item for the specified client
	def append_client_key(host, item, key)
		get_host_config(host)
		# key can be a comma separated list, should convert to array
		# and compare all values of the with all values in keys below
		keys = key.split(",")
		keys.each { |k| k.strip! }

		items = []
		if @config['clients']["#{host}"]["#{item}"].length > 0
			items = @config['clients']["#{host}"]["#{item}"].split(",")
		end
		items = items | keys
		@config['clients']["#{host}"]["#{item}"] = items.join(",")

		#if @config['clients']["#{host}"]["#{item}"].length > 0
		#	keys=@config['clients']["#{host}"]["#{item}"].split(",")
		#	keys.each do |i|
		#		if i == key 
		#			puts "Item #{item} already contains #{key}"
		#			return @config['clients']["#{host}"]["#{item}"]
		#		end
		#	end
		#	@config['clients']["#{host}"]["#{item}"] << ","
		#end
		#@config['clients']["#{host}"]["#{item}"] << key 
	end

	# append (or set) includes for specified client
	def append_client_includes(host, inc)
		append_client_key(host, "includes", inc)
	end

	# append (or set) excludes for specified client
	def append_client_excludes(host, exc)
		append_client_key(host, "excludes", exc)
	end

	# append (or set) opts for specified client
	def append_client_opts(host, opts)
		append_client_key(host, "opts", opts)
	end

	def get_client_key(host, key)
		get_host_config(host)

		inc = []
		if @config['globals']["#{key}"].length > 0
			inc = @config['globals']["#{key}"].split(",")
		end

		if @config['clients']["#{host}"]["#{key}"].length > 0
			# eliminate duplicates, if any
			inc = inc | @config['clients']["#{host}"]["#{key}"].split(",")
		end

		if host != "localhost" and key == "includes"
			inc.each_index do |i|
				inc[i] = "#{host}:" + inc[i]
			end
		end

		inc.join(",")

	end

	def get_client_includes(host)
		get_client_key(host, 'includes')

	end

	def get_client_excludes(host)
		get_client_key(host, 'excludes')
	end

	def get_client_opts(host)
		get_client_key(host, 'opts')
	end
end

class Rubac
	include Szmsg

	VERSION = '0.0.1'

	attr_reader :options

	def initialize(arguments, stdin)

		@includes = ""
		@excludes = ""
		@useropts = ""
		# rsync -av --relative --delete --delete-excluded --link-dest=/home/rubac/linguini/default/rubac.1 /home/etienne /home/rubac/linguini/default/rubac.0
		if ENV['RUBAC_SSHOPTS']
			@sshopts = ENV['RUBAC_SSHOPTS']
		else
			@sshopts = "-av"
		end
		@sshopts << " --relative --delete --delete-excluded"

		@rsync_rsh = "ssh"
		# use the value set in the environment, if set
		@rsync_rsh = "" if ENV['RSYNC_SSH']

		@arguments = arguments
		@stdin = stdin
		@revision = "$Rev$"[6..-3]
			      
		# Set defaults
		@options = OpenStruct.new
		@options.global = false
		@options.profile = "default"
		@options.dbname = nil
		
		#begin
		#	@options.client = Socket.gethostname
		#rescue
		#	@options.client = "localhost"
		#end
		@options.client = "localhost"

		# 
		# If /etc/rubac is writable use it as default, otherwise use
		# ~/.rubac/ (does this work for windoze?)
		#
		if ENV['RUBAC_DATADIR']
			@options.data_dir = ENV['RUBAC_DATADIR']
		else
			system_dir = "/etc/rubac"
			use_local = true
			begin
				Dir.mkdir(system_dir)
				use_local = false
			rescue Errno::EACCES
				use_local = true
			rescue Errno::EEXIST
				use_local = false
			end

			if use_local == false and File.writable?(system_dir)
				@options.data_dir = system_dir
			else
				@options.data_dir = File.expand_path("~") + "/.rubac"
			end
			ENV['RUBAC_DATADIR'] = @options.data_dir
			info "Data directory is #{@options.data_dir}"
		end

		begin
			FileUtils.mkdir(@options.data_dir) if not File.exist?(@options.data_dir)
		rescue
			puts "Failed to create data directory #{@options.data_dir}"
			exit false
		end

		@options.verbose = false
		@options.quiet = false
		@options.include = nil
		@options.exclude = nil
		@options.dest = nil
		@options.opts = nil
		@options.run = false
		@options.cmd = nil
		@options.dry_run = false

		#
		# TODO - add additional defaults end
		#
	end

	# Parse options, check arguments, then process the command
	def run 
        
		if arguments_valid? && parsed_options?

			puts "Start at #{DateTime.now}\n\n" if @options.verbose

			output_options if @options.verbose # [Optional]

			process_arguments            
			process_command

			#puts "\nFinished at #{DateTime.now}" if @options.verbose
		else
			usage_command
		end
	end

	protected

	def set_command(c)
		if @options.cmd == nil
			@options.cmd="#{c}_command"
		else
			warn "Command is already set to #{@options.cmd}, ignoring #{c} command"
		end
	end

	def parsed_options?

		# Specify options
		opts = OptionParser.new 
		opts.on('-V', '--verbose', "Run verbosely")    { @options.verbose = true }  
		opts.on('-q', '--quiet',   "Run quietly")      { @options.quiet = true }

		opts.on('-g', '--global', "Apply options to the global profile") { @options.global = true }

		opts.on('-cHOST', '--client HOST', "Backup Client hostname") do |host|
			host.strip!
			@options.client = host
		end

		opts.on('-DPATH', '--data_dir PATH', "Database directory") do |dir|
			dir.strip!
			@options.data_dir = dir
		end

		opts.on('-iPATH', '--include PATH', "Add include path") do |inc|
			inc.strip!
			if @options.include
				@options.include = @options.include + ",#{inc}"
			else
				@options.include = inc
			end
		end

		opts.on('-xPATH', '--exclude PATH', "Add exclude path") do |exc|
			exc.strip!
			if @options.exclude
				@options.exclude = @options.exclude + ",#{exc}"
			else
				@options.exclude = exc
			end
		end

		opts.on('-dPATH', '--dest PATH', "Set backup destination") do |dest|
			dest.strip!
			@options.dest = dest
		end


		opts.on('-pNAME', '--profile NAME', "Apply opts to specified profile") do |profile|
			@options.profile = profile
		end
		# TO DO - add additional options

		opts.on('-n', '--dry-run', "Perform a trial run of the backup") do
			@options.dry_run = true
		end
		opts.on('-h', '--help',    "Print help") do   #   { output_help }
			set_command("help")
		end
		opts.on('-r', '--run', "Run the backup") do
			set_command("run")
		end
		opts.on('-t', '--list', "List the backup options") do
			set_command("list")
		end
		opts.on('-H', '--history', "Backup history") do
			set_command("history")
		end
		opts.on('-v', '--version', "Print version") do
			set_command("version")
		end

		opts.parse!(@arguments) rescue return false

		process_options
		true      
	end

	# Performs post-parse processing on options
	def process_options
		@options.verbose = false if @options.quiet
		@options.dbname = @options.profile + ".xml"
	end

	def output_options
		puts "Options:\n"
      
		@options.marshal_dump.each do |name, val|        
			puts "  #{name} = #{val}"
		end
	end

	# True if required arguments were provided
	def arguments_valid?
		# TO DO - implement your real logic here
		#puts "arguments =  #{@arguments.length} \n"
		true if @arguments.length >= 1 
	end

	# Setup the arguments
	def process_arguments
		# TO DO - place in local vars, etc
		@config = Config_rubac.new
		@config.load_xml(@options.dbname, @options.data_dir)

		@config.set_global_dest(@options.dest) if @options.dest
		@options.dest = @config.get_global_dest

		if @options.global
			@config.append_global_includes(@options.include) if @options.include
			@config.append_global_excludes(@options.exclude) if @options.exclude
			@config.append_global_opts(@options.opts) if @options.opts
		else
			if @options.include
				@config.append_client_includes(@options.client, @options.include)
			end
			if @options.exclude
				@config.append_client_excludes(@options.client, @options.exclude)
			end
			if @options.opts
				@config.append_client_opts(@options.client, @options.opts)
			end
		end

		@xml = @config.save_xml
		puts @xml if @options.verbose

		@includes=@config.get_client_includes(@options.client)
		@excludes=@config.get_client_excludes(@options.client)
		@useropts=@config.get_client_opts(@options.client)
		@sshopts = "--dry-run " + @sshopts if @options.dry_run

		if not File.exist?(@options.dest)
			puts "Warning: backup destination not set"
		end
	end
    
	def help_command 
		version_command
		RDoc::usage() #exits app
	end
    
	def usage_command
		RDoc::usage('usage') # gets usage from comments above
	end
    
	def run_command
		info "run command"

		if @options.dest.length == 0
			puts "Error: backup destination not set"
			exit(1)
		end

		p @options.dest
		p @options.client
		p @options.profile
		pdest = File.join(@options.dest, @options.client, @options.profile, "rubac.0")

		inc = @includes.split(",")
		inc.each do |i|
			cmd=%Q(rsync #{@sshopts} #{@useropts})
			cmd << %Q( --exclude="#{@excludes}") if @excludes.length > 0
			cmd << %Q( #{i} #{pdest})
			puts %Q(#{cmd})
			`#{cmd}`
		end

		# DEST is the backup directory
		# HOST is the client (localhost or `hostname -s` is considered local)
		# PROFILE is the name of the profile
		#
		# if exists /DEST/HOST/PROFILE/rubac.4 move it to /DEST/HOST/PROFILE/rubac.5
		# if exists /DEST/HOST/PROFILE/rubac.3 move it to /DEST/HOST/PROFILE/rubac.4
		# if exists /DEST/HOST/PROFILE/rubac.2 move it to /DEST/HOST/PROFILE/rubac.3
		# if exists /DEST/HOST/PROFILE/rubac.1 move it to /DEST/HOST/PROFILE/rubac.2
		# if exists /DEST/HOST/PROFILE/rubac.0 move it to /DEST/HOST/PROFILE/rubac.1
		# backup to /DEST/HOST/PROFILE/rubac.0
		#a=[]
		#a=(1..5).to_a.reverse
		#a.each do |y|
		#	x = y-1
		#	puts "mv /DEST/HOST/PROFILE/rubac.#{x} /DEST/HOST/PROFILE/rubac.#{y}"
		#end
	end

	def list_command
		info "list command for client=#{@options.client}"
		puts %Q(includes="#{@includes}")
		puts %Q(excludes="#{@excludes}")
		puts %Q(user opts="#{@useropts}")
		puts %Q(ssh opts="#{@sshopts}")
		if @options.dest.length == 0
			puts %Q(Warning: backup destination not set)
		else
			puts %Q(backup dest="#{@options.dest}")
		end

	end

	def history_command
		info "history command"
	end

	def version_command
		puts "#{File.basename(__FILE__)} version #{VERSION}"
	end
    
	def process_command

		puts "##### #{@options.cmd} #####"
		if @options.cmd
			eval @options.cmd
		else
		end

	end

	def process_standard_input
		input = @stdin.read      
		# TO DO - process input

		# [Optional]
		# @stdin.each do |line| 
		#  # TO DO - process each line
		# end
	end
end

rubac = Rubac.new(ARGV, STDIN)
rubac.run

